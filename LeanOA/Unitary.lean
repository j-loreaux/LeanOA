import Mathlib.Analysis.CStarAlgebra.ContinuousFunctionalCalculus.Order
import Mathlib.Analysis.CStarAlgebra.ContinuousFunctionalCalculus.Unitary
import Mathlib.Analysis.CStarAlgebra.Exponential
import Mathlib.Analysis.SpecialFunctions.ContinuousFunctionalCalculus.ExpLog
import LeanOA.ForMathlib.Analysis.SpecialFunctions.ContinuousFunctionalCalculus.Rpow.Basic
import LeanOA.ForMathlib.Algebra.Star.Unitary
import LeanOA.ForMathlib.Misc

/-! # Properties of unitary elements in a C‚ãÜ-algebra

## Main results

+ `CStarAlgebra.exists_sum_four_unitary`: every element `x` in a unital C‚ãÜ-algebra is a linear
  combination of four unitary elements, and the norm of each coefficient does not exceed `‚Äñx‚Äñ / 2`.
+ `CStarAlgebra.span_unitary`: a unital C‚ãÜ-algebra is spanned by its unitary elements.

## To do

+ if `‚Äñu - 1‚Äñ < 1`, then there is a selfadjoint `x` such that `u = exp(I ‚Ä¢ x)`.
+ if `‚Äñu - 1‚Äñ < 1`, then there is a path of unitaries from `u` to `1`.
+ if `‚Äñu - v‚Äñ < 1`, then `u = exp(I ‚Ä¢ x) v`.
+ the path component of the identity in the unitary group is the set of unitaries `u` which
  are finite products of exponential unitaries.

-/

variable {A : Type*} [CStarAlgebra A] [PartialOrder A] [StarOrderedRing A]


section UnitarySpan

open scoped ComplexStarModule
open Complex

/-- If `a : A` is a selfadjoint element in a C‚ãÜ-algebra with `‚Äña‚Äñ ‚â§ 1`,
then `a + I ‚Ä¢ CFC.sqrt (1 - a ^ 2)` is unitary.

This is the key tool to show that a C‚ãÜ-algebra is spanned by its unitary elements. -/
lemma IsSelfAdjoint.self_add_I_smul_cfcSqrt_sub_sq_mem_unitary (a : A) (ha : IsSelfAdjoint a)
    (ha_norm : ‚Äña‚Äñ ‚â§ 1) : a + I ‚Ä¢ CFC.sqrt (1 - a ^ 2) ‚àà unitary A := by
  obtain (_ | _) := subsingleton_or_nontrivial A
  ¬∑ simp [Subsingleton.elim (a + I ‚Ä¢ CFC.sqrt (1 - a ^ 2)) 1]
  have key : a + I ‚Ä¢ CFC.sqrt (1 - a ^ 2) = cfc (fun x : ‚ÑÇ ‚Ü¶ x.re + I * ‚àö(1 - x.re ^ 2)) a := by
    rw [CFC.sqrt_eq_real_sqrt (1 - a ^ 2) ?nonneg]
    case nonneg =>
      rwa [sub_nonneg, ‚Üê CStarAlgebra.norm_le_one_iff_of_nonneg (a ^ 2), ha.sq_norm,
        sq_le_one_iff‚ÇÄ (by positivity)]
    -- I *really* want this to be solved with `cfc_pull`. This is a good example of a stress test.
    rw [cfc_add .., cfc_const_mul .., ‚Üê cfc_real_eq_complex (fun x ‚Ü¶ x) ha, cfc_id' ‚Ñù a,
      ‚Üê cfc_real_eq_complex (fun x ‚Ü¶ ‚àö(1 - x ^2)) ha, cfc‚Çô_eq_cfc, cfc_comp' (‚àö¬∑) (1 - ¬∑ ^ 2) a,
      cfc_sub .., cfc_pow .., cfc_const_one .., cfc_id' ..]
  rw [key, cfc_unitary_iff ..]
  intro x hx
  rw [‚Üê starRingEnd_apply, ‚Üê Complex.normSq_eq_conj_mul_self,
    Complex.normSq_ofReal_add_I_smul_sqrt_one_sub, Complex.ofReal_one]
  exact spectrum.norm_le_norm_of_mem (ha.spectrumRestricts.apply_mem hx) |>.trans ha_norm

@[simps]
noncomputable def selfAdjoint.unitarySelfAddISMul (a : selfAdjoint A)
    (ha_norm : ‚Äña‚Äñ ‚â§ 1) :
    unitary A :=
  ‚ü®(a : A) + I ‚Ä¢ CFC.sqrt (1 - a ^ 2 : A), a.2.self_add_I_smul_cfcSqrt_sub_sq_mem_unitary _ ha_norm‚ü©

lemma selfAdjoint.star_coe_unitarySelfAddISMul (a : selfAdjoint A) (ha_norm : ‚Äña‚Äñ ‚â§ 1) :
    (star (unitarySelfAddISMul a ha_norm) : A) = a - I ‚Ä¢ CFC.sqrt (1 - a ^ 2 : A) := by
  simp [a.2, IsSelfAdjoint.star_eq, ‚Üê sub_eq_add_neg,
    IsSelfAdjoint.of_nonneg (CFC.sqrt_nonneg (a := (1 - a ^ 2 : A)))]

@[simp high]
lemma selfAdjoint.realPart_unitarySelfAddISMul (a : selfAdjoint A) (ha_norm : ‚Äña‚Äñ ‚â§ 1) :
    ‚Ñú (unitarySelfAddISMul a ha_norm : A) = a := by
  simp [IsSelfAdjoint.imaginaryPart (x := CFC.sqrt (1 - a ^ 2 : A)) (by cfc_tac)]

/-- A stepping stone to `CStarAlgebra.exists_sum_four_unitary` that specifies the unitary
elements precisely. -/
lemma CStarAlgebra.norm_smul_two_inv_smul_add_four_unitary (x : A) (hx : x ‚â† 0) :
    let u‚ÇÅ : unitary A := selfAdjoint.unitarySelfAddISMul (‚Ñú (‚Äñx‚Äñ‚Åª¬π ‚Ä¢ x))
      (by simpa [norm_smul, inv_mul_le_one‚ÇÄ (norm_pos_iff.2 hx)] using realPart.norm_le x)
    let u‚ÇÇ : unitary A := selfAdjoint.unitarySelfAddISMul (‚Ñë (‚Äñx‚Äñ‚Åª¬π ‚Ä¢ x))
      (by simpa [norm_smul, inv_mul_le_one‚ÇÄ (norm_pos_iff.2 hx)] using imaginaryPart.norm_le x)
    x = ‚Äñx‚Äñ ‚Ä¢ (2‚Åª¬π : ‚Ñù) ‚Ä¢ (u‚ÇÅ + star u‚ÇÅ + I ‚Ä¢ (u‚ÇÇ + star u‚ÇÇ) : A) := by
  intro u‚ÇÅ u‚ÇÇ
  rw [smul_add, smul_comm _ I, unitary.coe_star, unitary.coe_star,
    ‚Üê realPart_apply_coe (u‚ÇÅ : A), ‚Üê realPart_apply_coe (u‚ÇÇ : A)]
  simp only [u‚ÇÅ, u‚ÇÇ, selfAdjoint.realPart_unitarySelfAddISMul,
    realPart_add_I_smul_imaginaryPart, norm_smul_norm_inv_smul]

/-- Every element `x` in a unital C‚ãÜ-algebra is a linear combination of four unitary elements,
and the norm of each coefficient does not exceed `‚Äñx‚Äñ / 2`. -/
lemma CStarAlgebra.exists_sum_four_unitary (x : A) :
    ‚àÉ u : Fin 4 ‚Üí unitary A, ‚àÉ c : Fin 4 ‚Üí ‚ÑÇ, x = ‚àë i, c i ‚Ä¢ (u i : A) ‚àß ‚àÄ i, ‚Äñc i‚Äñ ‚â§ ‚Äñx‚Äñ / 2 := by
  obtain (rfl | hx) := eq_or_ne x 0
  ¬∑ exact ‚ü®![1, -1, 1, -1], 0, by simp‚ü©
  ¬∑ have := norm_smul_two_inv_smul_add_four_unitary x hx
    extract_lets u‚ÇÅ u‚ÇÇ at this
    use ![u‚ÇÅ, star u‚ÇÅ, u‚ÇÇ, star u‚ÇÇ]
    use ![‚Äñx‚Äñ * 2‚Åª¬π, ‚Äñx‚Äñ * 2‚Åª¬π, ‚Äñx‚Äñ * 2‚Åª¬π * I, ‚Äñx‚Äñ * 2‚Åª¬π * I]
    constructor
    ¬∑ conv_lhs => rw [this]
      simp [Fin.sum_univ_four, ‚Üê Complex.coe_smul]
      module
    ¬∑ intro i
      fin_cases i
      all_goals simp [div_eq_mul_inv]

variable (A) in
open Submodule in
/-- A unital C‚ãÜ-algebra is spanned by its unitary elements. -/
lemma CStarAlgebra.span_unitary : span ‚ÑÇ (unitary A : Set A) = ‚ä§ := by
  rw [eq_top_iff]
  rintro x -
  obtain ‚ü®u, c, rfl, h‚ü© := CStarAlgebra.exists_sum_four_unitary x
  exact sum_mem fun i _ ‚Ü¶ Submodule.smul_mem _ _ (subset_span (u i).2)



end UnitarySpan

section ExpUnitary

-- if `‚Äñu - 1‚Äñ < 1`, then there is a selfadjoint `x` such that `u = exp(I ‚Ä¢ x)`.

variable {A : Type*} [CStarAlgebra A]

open Complex


-- `Mathlib.Analysis.SpecialFunctions.Complex.Arg`
@[fun_prop]
theorem Complex.continuousOn_arg : ContinuousOn arg slitPlane :=
  fun _ h ‚Ü¶ continuousAt_arg h |>.continuousWithinAt

@[aesop safe apply (rule_sets := [CStarAlgebra])]
lemma IsSelfAdjoint.cfc_arg (u : A) : IsSelfAdjoint (cfc (arg ¬∑ : ‚ÑÇ ‚Üí ‚ÑÇ) u) := by
  simp [isSelfAdjoint_iff, ‚Üê cfc_star]

lemma spectrum_subset_slitPlane_of_norm_lt_one {u : A} (hu : ‚Äñu - 1‚Äñ < 1) :
    spectrum ‚ÑÇ u ‚äÜ slitPlane := by
  nontriviality A
  have := spectrum.subset_closedBall_norm (ùïú := ‚ÑÇ) (u - 1) |>.trans <|
    Metric.closedBall_subset_ball hu
  rw [‚Üê map_one (algebraMap ‚ÑÇ A), ‚Üê spectrum.sub_singleton_eq, Set.sub_singleton] at this
  exact fun x hx ‚Ü¶ add_sub_cancel 1 x ‚ñ∏ Complex.mem_slitPlane_of_norm_lt_one (by simpa using this ‚ü®x, hx, rfl‚ü©)


lemma unitary.expUnitary_cfc_arg_eq_of_norm_lt_one (u : unitary A) (hu : ‚Äñ(u - 1 : A)‚Äñ < 1) :
    selfAdjoint.expUnitary ‚ü®cfc (arg ¬∑ : ‚ÑÇ ‚Üí ‚ÑÇ) (u : A), .cfc_arg (u : A)‚ü© = u := by
  nontriviality A
  have h_cont : ContinuousOn (arg ¬∑ : ‚ÑÇ ‚Üí ‚ÑÇ) (spectrum ‚ÑÇ (u : A)) :=
    continuous_ofReal.comp_continuousOn continuousOn_arg |>.mono <|
      spectrum_subset_slitPlane_of_norm_lt_one hu
  ext
  simp only [selfAdjoint.expUnitary_coe]
  rw [‚Üê CFC.exp_eq_normedSpace_exp, ‚Üê exp_eq_exp_‚ÑÇ, ‚Üê cfc_smul .., ‚Üê cfc_comp' ..]
  conv_rhs => rw [‚Üê cfc_id' ‚ÑÇ (u : A)]
  refine cfc_congr fun x hx ‚Ü¶ ?_
  have hx‚ÇÅ : ‚Äñx‚Äñ = 1 := by simpa using unitary.spectrum_subset_circle u hx
  convert Complex.exp_log (by simp [‚Üê norm_pos_iff, hx‚ÇÅ] : x ‚â† 0) using 2
  apply Complex.ext
  all_goals simp [log_re, hx‚ÇÅ, log_im]

section

open Filter Topology

theorem ContinuousOn.tendsto_restrict_iff_tendstoUniformlyOn {Œ± Œ≤ : Type*}
    [TopologicalSpace Œ±] [UniformSpace Œ≤] {s : Set Œ±} [CompactSpace s]
    {f : Œ± ‚Üí Œ≤} (hf : ContinuousOn f s) {Œπ : Type*} {p : Filter Œπ}
    {F : Œπ ‚Üí Œ± ‚Üí Œ≤} (hF : ‚àÄ i, ContinuousOn (F i) s) :
    Tendsto (fun i ‚Ü¶ ‚ü®_, (hF i).restrict‚ü© : Œπ ‚Üí C(s, Œ≤)) p (ùìù ‚ü®_, hf.restrict‚ü©) ‚Üî
      TendstoUniformlyOn F f p s := by
  rw [ContinuousMap.tendsto_iff_tendstoUniformly, tendstoUniformlyOn_iff_tendstoUniformly_comp_coe]
  congr!

theorem continuousAt_cfc (a : A) [ha : IsStarNormal a] {X : Type*} [TopologicalSpace X]
    {f : X ‚Üí ‚ÑÇ ‚Üí ‚ÑÇ} (hf : ‚àÄ x, ContinuousOn (f x) (spectrum ‚ÑÇ a)) (x‚ÇÄ : X)
    (h_tendsto : TendstoUniformlyOn f (f x‚ÇÄ) (ùìù x‚ÇÄ) (spectrum ‚ÑÇ a)) :
    ContinuousAt (fun x ‚Ü¶ cfc (f x) a) x‚ÇÄ := by
  conv =>
    enter [1, x]
    rw [cfc_apply ..]
  apply cfcHom_continuous ha |>.continuousAt.comp
  rwa [ContinuousAt, (hf x‚ÇÄ).tendsto_restrict_iff_tendstoUniformlyOn hf]

end


--- we need the other lemmas like this
open UniformFun in
theorem ContinuousMap.continuous_iff_continuous_uniformFun {X Œ± Œ≤ : Type*}
    [TopologicalSpace X] [TopologicalSpace Œ±] [UniformSpace Œ≤] (f : X ‚Üí C(Œ±, Œ≤)) [CompactSpace Œ±] :
    Continuous f ‚Üî Continuous (fun x ‚Ü¶ ofFun (f x)) := by
  simp only [continuous_iff_continuousAt]
  apply forall_congr' fun x ‚Ü¶ ?_
  simp [ContinuousAt, tendsto_iff_tendstoUniformly, UniformFun.tendsto_iff_tendstoUniformly,
    Function.comp_def]

attribute [fun_prop] NormedSpace.exp_continuous

open Real in
noncomputable
def unitary.pathToOne (u : unitary A) (hu : ‚Äñ(u - 1 : A)‚Äñ < 1) : Path 1 u where
  toFun t := selfAdjoint.expUnitary
    ‚ü®cfc (t * arg ¬∑ : ‚ÑÇ ‚Üí ‚ÑÇ) (u : A), by simp [selfAdjoint.mem_iff, ‚Üê cfc_star]‚ü©
  continuous_toFun := by
    simp only [continuous_induced_rng, Function.comp_def, selfAdjoint.expUnitary_coe]
    suffices Continuous fun x : unitInterval ‚Ü¶ cfc (fun z ‚Ü¶ x * arg z) (u : A) by fun_prop
    rw [continuous_iff_continuousAt]
    intro x‚ÇÄ
    apply continuousAt_cfc
    ¬∑ exact fun _ ‚Ü¶ ContinuousOn.mono (by fun_prop) (spectrum_subset_slitPlane_of_norm_lt_one hu)
    ¬∑ rw [Metric.tendstoUniformlyOn_iff]
      simp [dist_eq_norm, ‚Üê sub_mul]
      intro Œµ hŒµ
      filter_upwards [Metric.ball_mem_nhds x‚ÇÄ (Œµ := Œµ / œÄ) (by positivity)] with x hx z hz
      calc
        ‚Äñ(x‚ÇÄ - x : ‚ÑÇ)‚Äñ * |z.arg| ‚â§ ‚Äñ(x‚ÇÄ - x : ‚ÑÇ)‚Äñ * œÄ := by gcongr; exact Complex.abs_arg_le_pi z
        _ < Œµ / œÄ * œÄ := by
          gcongr
          simpa [Subtype.dist_eq, dist_eq_norm, ‚Üê Complex.ofReal_sub, abs_sub_comm] using hx
        _ = Œµ := div_mul_cancel‚ÇÄ _ (by positivity)
  source' := by ext; simp
  target' := by
    ext
    simpa using congr(Subtype.val $(unitary.expUnitary_cfc_arg_eq_of_norm_lt_one u hu))


end ExpUnitary
